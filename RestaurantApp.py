# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RestaurantApp', [dirname(__file__)])
        except ImportError:
            import _RestaurantApp
            return _RestaurantApp
        if fp is not None:
            try:
                _mod = imp.load_module('_RestaurantApp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RestaurantApp = swig_import_helper()
    del swig_import_helper
else:
    import _RestaurantApp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TaskBoard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskBoard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskBoard, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SLOT_SPAN"] = _RestaurantApp.TaskBoard_SLOT_SPAN_set
    __swig_getmethods__["SLOT_SPAN"] = _RestaurantApp.TaskBoard_SLOT_SPAN_get
    if _newclass:SLOT_SPAN = _swig_property(_RestaurantApp.TaskBoard_SLOT_SPAN_get, _RestaurantApp.TaskBoard_SLOT_SPAN_set)
    def __init__(self, *args): 
        this = _RestaurantApp.new_TaskBoard(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNoOfCooks(self): return _RestaurantApp.TaskBoard_getNoOfCooks(self)
    def setNoOfCook(self, *args): return _RestaurantApp.TaskBoard_setNoOfCook(self, *args)
    def getCook(self, *args): return _RestaurantApp.TaskBoard_getCook(self, *args)
    def getLastOrder(self): return _RestaurantApp.TaskBoard_getLastOrder(self)
    def setLastOrder(self, *args): return _RestaurantApp.TaskBoard_setLastOrder(self, *args)
    __swig_destroy__ = _RestaurantApp.delete_TaskBoard
    __del__ = lambda self : None;
TaskBoard_swigregister = _RestaurantApp.TaskBoard_swigregister
TaskBoard_swigregister(TaskBoard)

NUM_THREADS = _RestaurantApp.NUM_THREADS

def process():
  return _RestaurantApp.process()
process = _RestaurantApp.process

def addTaskToCook(*args):
  return _RestaurantApp.addTaskToCook(*args)
addTaskToCook = _RestaurantApp.addTaskToCook

def assign_data_cook():
  return _RestaurantApp.assign_data_cook()
assign_data_cook = _RestaurantApp.assign_data_cook

def generateOrders(*args):
  return _RestaurantApp.generateOrders(*args)
generateOrders = _RestaurantApp.generateOrders

def appendNewData(*args):
  return _RestaurantApp.appendNewData(*args)
appendNewData = _RestaurantApp.appendNewData

def testSquare(*args):
  return _RestaurantApp.testSquare(*args)
testSquare = _RestaurantApp.testSquare

def setTaskBoard():
  return _RestaurantApp.setTaskBoard()
setTaskBoard = _RestaurantApp.setTaskBoard

def startApp():
  return _RestaurantApp.startApp()
startApp = _RestaurantApp.startApp

def getPendingTaskStatus():
  return _RestaurantApp.getPendingTaskStatus()
getPendingTaskStatus = _RestaurantApp.getPendingTaskStatus

def getCompletedTaskStatus():
  return _RestaurantApp.getCompletedTaskStatus()
getCompletedTaskStatus = _RestaurantApp.getCompletedTaskStatus
# This file is compatible with both classic and new-style classes.

cvar = _RestaurantApp.cvar

